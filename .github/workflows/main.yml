name: Build and Push Docker Image for Angular
 
on:
  push:
    branches:
      - master 
  pull_request:
    branches:
      - master
 
jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3
 
      # Paso 2: Autenticar en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

          
      - name: Install dependencies
        run: npm install

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Verify Angular CLI installation
        run: ng --version
  
      - name: Build Angular Application
        run: ng build --configuration production
  
      - name: List files after build
        run: ls -R ./dist



 
      # Paso 3: Construir la imagen de Docker para Angular
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest .
 
      # Paso 4: Hacer push de la imagen a DockerHub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
      # Paso 5: Configurar credenciales de AWS para SSH
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia a tu región
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
 
      # Paso 5.5: Agregar clave SSH
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
 
      # Paso 6: Conectarse a EC2 y desplegar el contenedor de Angular
      - name: SSH commands to deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@3.90.157.39 << 'EOF'
            # Autenticar en DockerHub desde EC2
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # Descargar la última versión de la imagen
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
            # Parar y eliminar cualquier contenedor previo
            docker stop frontend || true && docker rm frontend || true
            # Iniciar el contenedor
            docker run -d --name frontend -p 443:443 ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          EOF
